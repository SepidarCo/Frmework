using System;
using System.Collections.Generic;
using System.Text;

namespace Sepidar.Framework
{
    public class Base64Helper
    {
        static char[] characters = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '+', '/' };

        static int[] b64d = new int[] { 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 062, 000, 000, 000, 063, 000, 001, 002, 003, 004, 005, 006, 007, 008, 009, 000, 000, 000, 000, 000, 000, 000, 010, 011, 012, 013, 014, 015, 016, 017, 018, 019, 020, 021, 022, 023, 024, 025, 026, 027, 028, 029, 030, 031, 032, 033, 034, 035, 000, 000, 000, 000, 000, 000, 036, 037, 038, 039, 040, 041, 042, 043, 044, 045, 046, 047, 048, 049, 050, 051, 052, 053, 054, 055, 056, 057, 058, 059, 060, 061, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000 };

        public static string ToString(int value)
        {
            char[] c = new char[5];
            c[0] = characters[(value & 1056964608) >> 24];
            c[1] = characters[(value & 16515072) >> 18];
            c[2] = characters[(value & 258048) >> 12];
            c[3] = characters[(value & 4032) >> 06];
            c[4] = characters[(value & 63)];
            return new string(c);
        }

        public static int ToInt(string text)
        {
            if (text.Length < 1 || text.Length > 5)
            {
                throw new FrameworkException("Invalid base64 text to be converted to int. It should be between 1 and 5 characters");
            }
            int n = text.Length;
            char[] c = text.ToCharArray();
            return (b64d[c[0]] << 24) + (b64d[c[1]] << 18) + (b64d[c[2]] << 12) + (b64d[c[3]] << 6) + b64d[c[4]];
        }
    }
}
